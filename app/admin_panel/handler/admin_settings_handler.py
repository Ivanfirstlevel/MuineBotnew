from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message

from app.Database.methods.admin_methods import delete_admin_by_username, add_new_admin
from app.admin_panel.admin_text import start_admin_panel_text
from app.admin_panel.keyboards import start_admin_kb, get_all_admins_kb, admin_settings_kb
from app.admin_panel.state import FSMAdminPanel, FSMAdminSettings


async def add_admin_settings(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        admin = data['admin']
    match call.data:
        case "add_admin":
            await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑\n"
                                         "–ù–∞–ø—Ä–∏–º–µ—Ä: admin\n"
                                         "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /break, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
            await FSMAdminSettings.add_admin.set()
        case "remove_admin":
            kb = get_all_admins_kb()
            if not kb:
                await call.message.edit_text("‚ö†Ô∏è–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                                             reply_markup=admin_settings_kb)
            else:
                await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å", reply_markup=kb)
                await FSMAdminSettings.remove_admin.set()
        case "back":
            await call.message.edit_text(start_admin_panel_text,
                                         reply_markup=start_admin_kb(admin='–°—É–ø–µ—Ä –ê–¥–º–∏–Ω' if admin == 2 else '–ê–¥–º–∏–Ω'))
            await FSMAdminPanel.start_admin_panel.set()
        case _:
            await state.finish()


async def remove_admin(call: CallbackQuery, state: FSMContext):
    if call.data == 'back':
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=admin_settings_kb)
        await FSMAdminSettings.add_admin_settings.set()
    else:
        delete_admin_by_username(call.data)
        kb = get_all_admins_kb()
        if not kb:
            await call.message.edit_text("‚ôªÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω\n"
                                         "‚ö†Ô∏è–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n\n"
                                         "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=admin_settings_kb)
            await FSMAdminSettings.add_admin_settings.set()
        else:
            await call.message.edit_text("‚ôªÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω\n"
                                         "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å", reply_markup=kb)


async def add_admin(message: Message, state: FSMContext):
    if message.text == '/break':
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=admin_settings_kb)
        await FSMAdminSettings.add_admin_settings.set()
    else:
        add_new_admin(user_name=message.text)
        await message.answer("üü¢Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω\n"
                             "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=admin_settings_kb)
        await FSMAdminSettings.add_admin_settings.set()


def register_admin_settings(dp):
    dp.register_callback_query_handler(add_admin_settings, state=FSMAdminSettings.add_admin_settings)
    dp.register_callback_query_handler(remove_admin, state=FSMAdminSettings.remove_admin)
    dp.register_message_handler(add_admin, state=FSMAdminSettings.add_admin)
